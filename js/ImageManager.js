// Generated by CoffeeScript 1.9.2
(function() {
  var DEVIANTART_HOSTNAME, GELBOORU_HOSTNAME, IMAGES_TO, ImageManager, PIXIV_HOSTNAME, SANKAKUCOMPLEX_HOSTNAME, my, path;

  path = require('path');

  my = require(path.resolve('build', 'lib', 'my')).my;

  DEVIANTART_HOSTNAME = 'deviantart.com';

  GELBOORU_HOSTNAME = 'gelbooru.com';

  PIXIV_HOSTNAME = 'pixiv.net';

  SANKAKUCOMPLEX_HOSTNAME = 'sankakucomplex.com';

  IMAGES_TO = path.resolve('images');

  module.exports = ImageManager = (function() {
    function ImageManager(url) {
      this.url = url;
      this.filename = url;
      this.hostname = url.hostname;
    }

    ImageManager.prototype.getRequestParams = function(hostname) {
      var result;
      result = {};
      if (hostname.indexOf(PIXIV_HOSTNAME) !== -1) {
        result = {
          headers: {
            'referer': 'http://www.pixiv.net/'
          }
        };
      }
      if (hostname.indexOf(SANKAKUCOMPLEX_HOSTNAME) !== -1) {
        result = {
          headers: {
            'User-Agent': 'Magic Browser',
            'referer': this.url
          }
        };
      }
      return result;
    };

    ImageManager.prototype.isOverLimitFilesize = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var opts;
          opts = {
            requestParams: _this.getRequestParams(_this.hostname)
          };
          return my.getFilesizeBite(_this.url, opts).then(function(bite) {
            var mb;
            mb = bite / (1024 * 1024);
            if (mb >= 8) {
              return reject('error');
            }
            return resolve(true);
          });
        };
      })(this));
    };

    ImageManager.prototype.save = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var opts;
          opts = {
            targetPath: IMAGES_TO,
            filename: _this.url,
            requestParams: _this.getRequestParams(_this.hostname)
          };
          return my.saveImage(_this.url, opts).then(function(outputPath) {
            return resolve(outputPath);
          })["catch"](function(err) {
            return reject(err);
          });
        };
      })(this));
    };

    return ImageManager;

  })();

}).call(this);
