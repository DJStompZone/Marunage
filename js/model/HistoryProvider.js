// Generated by CoffeeScript 1.9.2
(function() {
  var DBBaseProvider, History, HistoryProvider, HistorySchema, ObjectId, Schema, _, mongoose,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  mongoose = require('mongoose');

  Schema = mongoose.Schema;

  ObjectId = Schema.ObjectId;

  DBBaseProvider = require("./DBBaseProvider");

  HistorySchema = new Schema({
    url: {
      type: String,
      unique: true
    },
    createdAt: {
      type: Date,
      "default": Date.now()
    },
    updatedAt: {
      type: Date,
      "default": Date.now()
    }
  });

  HistorySchema.index({
    updatedAt: -1
  });

  mongoose.model('History', HistorySchema);

  History = mongoose.model('History');

  module.exports = HistoryProvider = (function(superClass) {
    extend(HistoryProvider, superClass);

    function HistoryProvider() {
      HistoryProvider.__super__.constructor.call(this, History);
    }

    HistoryProvider.prototype.find = function(params) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          console.time("History findByIdAndUpdate");
          return History.find({}).sort({
            updatedAt: -1
          }).limit(params.limit - 0 || 20).skip((params.page - 0 || 0) * params.limit).exec(function(err, doc) {
            console.timeEnd("History findByIdAndUpdate");
            if (err) {
              return reject(err);
            }
            return resolve(doc);
          });
        };
      })(this));
    };

    HistoryProvider.prototype.upsert = function(params) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var data, options, query;
          console.log(params);
          query = {
            url: params.url
          };
          data = {
            url: params.url
          };
          data.updatedAt = Date.now();
          options = {
            upsert: true
          };
          return resolve(_this.update(query, data, options));
        };
      })(this));
    };

    return HistoryProvider;

  })(DBBaseProvider);

}).call(this);
