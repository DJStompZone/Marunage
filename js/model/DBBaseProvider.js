// Generated by CoffeeScript 1.9.2
(function() {
  var DBBaseProvider, _, chalk, configs, db, moment, mongoose, uri;

  _ = require('lodash');

  chalk = require('chalk');

  moment = require('moment');

  configs = require('konfig')();

  mongoose = require('mongoose');

  uri = process.env.MONGOLAB_URI || configs.app.MONGODB_URI;

  db = mongoose.connect(uri);

  module.exports = DBBaseProvider = (function() {
    function DBBaseProvider(Model) {
      this.Model = Model;
      console.log(this.Model.modelName);
    }

    DBBaseProvider.prototype.findByIdAndUpdate = function(_id, data, options) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          console.log(chalk.green("DBBaseProvider " + _this.Model.modelName + " findByIdAndUpdate"));
          console.log(_id);
          console.log(data);
          console.log(options);
          console.time(_this.Model.modelName + " findByIdAndUpdate");
          return _this.Model.findByIdAndUpdate(_id, data, options, function(err, doc) {
            console.timeEnd(_this.Model.modelName + " findByIdAndUpdate");
            if (err) {
              return reject(err);
            }
            return resolve(doc);
          });
        };
      })(this));
    };

    DBBaseProvider.prototype.findOneAndUpdate = function(query, data, options) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          console.log(chalk.green("DBBaseProvider " + _this.Model.modelName + " findOneAndUpdate"));
          console.log(query);
          console.log(data);
          console.log(options);
          console.time(_this.Model.modelName + " findOneAndUpdate");
          return _this.Model.findOneAndUpdate(query, data, options, function(err, doc) {
            console.timeEnd(_this.Model.modelName + " findOneAndUpdate");
            if (err) {
              return reject(err);
            }
            return resolve(doc);
          });
        };
      })(this));
    };

    DBBaseProvider.prototype.save = function(data) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          console.log(chalk.green("DBBaseProvider " + _this.Model.modelName + " save"));
          console.time(_this.Model.modelName + " save");
          return data.save(function(err, doc) {
            console.timeEnd(_this.Model.modelName + " save");
            if (err) {
              return reject(err);
            }
            return resolve(doc);
          });
        };
      })(this));
    };

    DBBaseProvider.prototype.update = function(query, data, options) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          console.log(chalk.green("DBBaseProvider " + _this.Model.modelName + " update"));
          console.log(query);
          console.log(data);
          console.log(options);
          console.time(_this.Model.modelName + " update");
          return _this.Model.update(query, data, options, function(err) {
            console.timeEnd(_this.Model.modelName + " update");
            if (err) {
              return reject(err);
            }
            return resolve('update ok');
          });
        };
      })(this));
    };

    DBBaseProvider.prototype.remove = function(query, data, options) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          console.log(chalk.green("DBBaseProvider " + _this.Model.modelName + " remove"));
          console.log(query);
          console.log(data);
          console.log(options);
          console.time(_this.Model.modelName + " remove");
          return _this.Model.remove(query, function(err) {
            console.timeEnd(_this.Model.modelName + " remove");
            if (err) {
              return reject(err);
            }
            return resolve('remove ok');
          });
        };
      })(this));
    };

    return DBBaseProvider;

  })();

}).call(this);
